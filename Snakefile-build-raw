import pathlib, os, json, sys
import scripts.util.patterns as pat
from datetime import datetime
import scripts.util.utils as ut
from scripts.util.pars_loading import pars_catalog

# Set with `snakemake --configfile=/path/to/your/config.json`
# configfile: "have/to/specify/path/to/your/config.json"

ut.subst_vars_in_snakemake_config(workflow, config)

setup = config["setups"]["l200"]
configs = ut.config_path(setup)
chan_maps = ut.chan_map_path(setup)
swenv = ut.runcmd(setup)

basedir = workflow.basedir


localrules:
    do_nothing,
    gen_filelist,
    autogen_output,


rule do_nothing:
    input:
        setup["paths"]["workflow"]


onstart:
    print("Starting workflow")


onsuccess:
    print("Workflow finished, no error")
    shell("rm *.gen || true")
    #shell(f"rm {ut.filelist_path(setup)}/* || true")


def get_pattern(tier):
    if tier == "daq":
        return pat.get_pattern_unsorted_data(setup)
    elif tier == "raw":
        return pat.get_pattern_tier_daq(setup)
    else:
        return pat.get_pattern_tier_raw(setup)


checkpoint gen_filelist:
    output:
        os.path.join(ut.filelist_path(setup), "{label}-{tier}.{extension}list"),
    params:
        setup=lambda wildcards: setup,
        search_pattern=lambda wildcards: get_pattern(wildcards.tier),
        basedir=basedir,
        configs=configs,
        chan_maps=chan_maps,
        blinding = True
    script:
        "scripts/create_filelist.py"


def read_filelist(wildcards):
    with checkpoints.gen_filelist.get(
        label=wildcards.label, tier=wildcards.tier, extension="file"
    ).output[0].open() as f:
        files = f.read().splitlines()
        return files


rule autogen_output:
    input:
        filelist=read_filelist,
    output:
        gen_output="{label}-{tier}.gen",
        summary_log=f"{pat.log_path(setup)}/summary-"
        + "{label}-{tier}"
        + f"-{datetime.strftime(datetime.utcnow(), '%Y%m%dT%H%M%SZ')}.log",
        warning_log=f"{pat.log_path(setup)}/warning-"
        + "{label}-{tier}"
        + f"-{datetime.strftime(datetime.utcnow(), '%Y%m%dT%H%M%SZ')}.log",
    params:
        log_path=pat.tmp_log_path(setup),
        tmp_par_path=os.path.join(ut.tmp_par_path(setup), "*_db.json"),
        valid_keys_path=os.path.join(ut.pars_path(setup), "valid_keys"),
        filedb_path=os.path.join(ut.pars_path(setup), "filedb"),
        setup=lambda wildcards: setup,
        basedir=basedir,
    script:
        "scripts/complete_run.py"


rule sort_data:
    input:
        pat.get_pattern_unsorted_data(setup),
    output:
        pat.get_pattern_tier_daq(setup),
    shell:
        "mv {input} {output}"


rule build_raw:
    input:
        pat.get_pattern_tier_daq(setup),
    params:
        timestamp="{timestamp}",
        datatype="{datatype}",
    output:
        pat.get_pattern_tier_raw(setup),
    log:
        pat.get_pattern_log(setup, "tier_raw"),
    group:
        "tier-raw"
    resources:
        mem_swap=110,
        runtime=300,
    shell:
        "{swenv} python3 -B {basedir}/scripts/build_raw.py "
        "--log {log} "
        "--configs {configs} "
        "--chan_maps {chan_maps} "
        "--datatype {params.datatype} "
        "--timestamp {params.timestamp} "
        "{input} {output}"

def get_blinding_curve_file(wildcards):
    # func to load in blinding curves
    return pars_catalog.get_calib_files(Path(pat.par_overwrite_path(setup)) / "raw" /"validity.jsonl", wildcards.timestamp)

def get_blinding_check_file(wildcards):
    # func to get the right check file
    return pars_catalog.get_calib_files(Path(pat.par_raw_path(setup))/ "validity.jsonl", wildcards.timestamp)

rule build_raw_blind:
    input:
        tier_file = pat.get_pattern_tier_raw(setup).replace("{datatype}","phy"),
        blind_file = get_blinding_curve_file,
        check_file = get_blinding_check_file,
    params:
        timestamp = "{timestamp}",
        datatype = "{datatype}"
    output:
        pat.get_pattern_tier_raw_blind(setup)
    log:
        pat.get_pattern_log(setup, "tier_raw_blind").replace("{datatype}","phy")
    group: "tier-raw"
    resources:
        mem_swap=110,
        runtime=300
    shell:
        "{swenv} python3 -B {basedir}/scripts/build_raw_blind.py "
        "--log {log} "
        "--configs {configs} "
        "--chan_maps {chan_maps} "
        "--datatype {params.datatype} "
        "--timestamp {params.timestamp} "
        "--blind_curve {input.par_file} "
        "{input.tier_file} "
        "{output}"